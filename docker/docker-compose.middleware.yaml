services:
  # The postgres database.
  db:
    image: mysql:8.0
    restart: always
    env_file:
      - ./middleware.env
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD:-test123456}
      MYSQL_DATABASE: ${MYSQL_DATABASE:-test}
      MYSQL_USER: ${MYSQL_USER:-test}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD:-test123456}
    command: >
      --default-authentication-plugin=mysql_native_password
      --max_connections=${MYSQL_MAX_CONNECTIONS:-200}
      --innodb_buffer_pool_size=${MYSQL_INNODB_BUFFER_POOL_SIZE:-256M}
      --innodb_log_file_size=${MYSQL_INNODB_LOG_FILE_SIZE:-64M}
    volumes:
      - ${MYSQL_HOST_VOLUME:-./volumes/mysql/data}:/var/lib/mysql
    ports:
      - "${EXPOSE_MYSQL_PORT:-3306}:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-p${MYSQL_ROOT_PASSWORD:-test123456}"]
      interval: 1s
      timeout: 3s
      retries: 30
  
  
  #  # The postgres database.
#  db:
#    image: postgres:15-alpine
#    restart: always
#    env_file:
#      - ./middleware.env
#    environment:
#      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-test123456}
#      POSTGRES_DB: ${POSTGRES_DB:-test}
#      PGDATA: ${PGDATA:-/var/lib/postgresql/data/pgdata}
#    command: >
#      postgres -c 'max_connections=${POSTGRES_MAX_CONNECTIONS:-100}'
#               -c 'shared_buffers=${POSTGRES_SHARED_BUFFERS:-128MB}'
#               -c 'work_mem=${POSTGRES_WORK_MEM:-4MB}'
#               -c 'maintenance_work_mem=${POSTGRES_MAINTENANCE_WORK_MEM:-64MB}'
#               -c 'effective_cache_size=${POSTGRES_EFFECTIVE_CACHE_SIZE:-4096MB}'
#    volumes:
#      - ${PGDATA_HOST_VOLUME:-./volumes/db/data}:/var/lib/postgresql/data
#    ports:
#      - "${EXPOSE_POSTGRES_PORT:-5432}:5432"
#    healthcheck:
#      test: [ "CMD", "pg_isready" ]
#      interval: 1s
#      timeout: 3s
#      retries: 30

  # The redis cache.
  redis:
    image: redis:6-alpine
    restart: always
    environment:
      REDISCLI_AUTH: ${REDIS_PASSWORD:-test123456}
    volumes:
      # Mount the redis data directory to the container.
      - ${REDIS_HOST_VOLUME:-./volumes/redis/data}:/data
    # Set the redis password when startup redis server.
    command: redis-server --requirepass ${REDIS_PASSWORD:-test123456}
    ports:
      - "${EXPOSE_REDIS_PORT:-6379}:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]


networks:
  # create a network between sandbox, api and ssrf_proxy, and can not access outside.
  ssrf_proxy_network:
    driver: bridge
    internal: true
